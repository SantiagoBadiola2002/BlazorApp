@page "/registroCliente/{oficinaId:int}"
@rendermode InteractiveServer
@using BlazorApp.Models
@using BlazorApp.Models.DTs
@using BlazorApp.Models.Interfaces
@inject NavigationManager NavigationManager
@inject IClienteRepository ClienteRepository
@inject IOficinaRepository OficinaRepository

<h3>Registro de Cliente en Oficina: @nombreOficina</h3>

@if (oficina == null)
{
    <p><em>Cargando datos de la oficina...</em></p>
}
else
{
    <RadzenTextBox @bind-Value="cedula" Placeholder="Ingrese su cédula" Style="width: 20%;" />
    <RadzenButton Text="Registrar" Click="@RegistrarCliente" Disabled="@(string.IsNullOrEmpty(cedula))" />

    <!-- Alerta de registro -->
    @if (alertVisible)
    {
        <RadzenAlert AlertStyle="@(isError ? AlertStyle.Danger : AlertStyle.Success)"
                     Variant="Variant.Flat"
                     Shade="Shade.Lighter"
                     Title="@(isError ? "Error" : "Éxito")"
                     Visible="true"
                     AllowClose="false">
            @alertMessage
        </RadzenAlert>
    }
}

@code {
    [Parameter] public int oficinaId { get; set; }  // Oficina ID se recibe como parámetro de la ruta
    private string nombreOficina;
    private DTOficina oficina;
    private string cedula;
    private string alertMessage;
    private bool isError;
    private bool alertVisible;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosDeOficina();
    }

    private async Task CargarDatosDeOficina()
    {
        if (oficinaId > 0)
        {
            // Cargar la oficina seleccionada usando la oficinaId de la URL
            oficina = OficinaRepository.ObtenerOficinaPorIdDTO(oficinaId);
            if (oficina != null)
            {
                nombreOficina = oficina.Nombre;
            }
            else
            {
                alertMessage = "Oficina no encontrada.";
                isError = true;
                alertVisible = true;
            }
        }
    }

    private async void RegistrarCliente()
    {
        try
        {
            var nuevoCliente = new DTCliente
                {
                    Cedula = cedula,
                    Estado = EstadoCliente.Esperando,
                    FechaRegistro = DateTime.Now
                };

            // Registrar el cliente en la oficina seleccionada
            Console.WriteLine("### /registroCliente/ ###");
            Console.WriteLine("### nuevoCliente CI: " + nuevoCliente.Cedula + "Oficina ID: " + oficinaId + "###");
            await OficinaRepository.RegistrarClienteEnOficinaAsync(oficinaId, nuevoCliente);
            alertMessage = $"Cliente registrado exitosamente en la oficina {nombreOficina}.";
            isError = false;
            cedula = string.Empty;
            await MostrarAlertaTemporal();
        }
        catch (Exception ex)
        {
            alertMessage = "Error al registrar el cliente: " + ex.Message;
            isError = true;
            await MostrarAlertaTemporal();
        }
    }

    private async Task MostrarAlertaTemporal()
    {
        alertVisible = true;
        StateHasChanged();
        await Task.Delay(3000);
        alertVisible = false;
        StateHasChanged();
    }
}