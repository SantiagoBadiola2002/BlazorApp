@page "/registroCliente"
@using BlazorApp.Models
@using BlazorApp.Models.Interfaces
@using BlazorApp.Infraestructure.Data
@inject IOficinaRepository OficinaRepository
@inject IClienteRepository ClienteRepository

@if (oficinas == null || oficinas.Count == 0)
{
    <p><em>Cargando oficinas...</em></p>
}
else
{
    <RadzenDropDown @bind-Value="selectedOficinaId"
                    Data="@oficinas"
                    TextProperty="Nombre"
                    ValueProperty="Id" />
    <RadzenTextBox @bind-Value="cedula" Placeholder="Ingrese su cédula" Style="width: 20%;" />
    <RadzenButton Text="Registrar" Click="RegistrarCliente" Disabled="@(string.IsNullOrEmpty(cedula) || selectedOficinaId == 0)" />
}

<p>@resultado</p>

@code {
    private List<Oficina> oficinas;
    private int selectedOficinaId;
    private string cedula;
    private string resultado;

    protected override async Task OnInitializedAsync()
    {
        oficinas =  OficinaRepository.ObtenerTodasLasOficinas();

        if (oficinas != null && oficinas.Count > 0)
        {
            Console.WriteLine($"Se han cargado {oficinas.Count} oficinas.");
            foreach (var oficina in oficinas)
            {
                Console.WriteLine($"Oficina: {oficina.Nombre}, ID: {oficina.Id}");
            }
        }
        else
        {
            Console.WriteLine("No se encontraron oficinas.");
        }
    }

    private void RegistrarCliente()
    {
        var oficina = oficinas.FirstOrDefault(o => o.Id == selectedOficinaId);
        if (oficina != null)
        {
            var nuevoCliente = new Cliente(cedula);
            ClienteRepository.AgregarCliente(nuevoCliente);
            oficina.ClientesEnEspera.Add(nuevoCliente);
            resultado = "Cliente registrado exitosamente en la oficina " + oficina.Nombre;
        }
        else
        {
            resultado = "Error al registrar cliente. Oficina no encontrada.";
        }
    }
}
