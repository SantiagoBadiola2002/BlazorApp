@page "/registroCliente"
@rendermode InteractiveServer
@using BlazorApp.Models
@using BlazorApp.Models.Interfaces
@using BlazorApp.Models.BaseDeDatos
@using Microsoft.EntityFrameworkCore

@inject ContextoBD contextBd
@inject IClienteRepository ClienteRepository
@inject IOficinaRepository OficinaRepository

<h3>Registro de Cliente</h3>

@if (oficinas == null || oficinas.Count == 0)
{
    <p><em>Cargando oficinas...</em></p>
}
else
{
    <div class="rz-p-0 rz-p-md-12">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" Style="border: var(--rz-grid-cell-border);">
            <RadzenDropDown @bind-Value=@selectedOficinaId
                            Data=@oficinas
                            TextProperty="Nombre"
                            ValueProperty="Id"
                            Style="width: 100%; max-width: 400px;"
                            Name="DropDownBindValue"
                            Placeholder="Seleccione una oficina" />
            <RadzenTextBox @bind-Value="cedula" Placeholder="Ingrese su cédula" Style="width: 20%;" />
            <RadzenButton Text="Registrar" Click="@RegistrarCliente" Disabled="@(string.IsNullOrEmpty(cedula) || selectedOficinaId == 0)" />
        </RadzenStack>
    </div>
}

<!-- Alerta de registro exitoso o error -->
@if (alertVisible)
{
    <RadzenAlert AlertStyle="@(isError ? AlertStyle.Danger : AlertStyle.Success)"
                 Variant="Variant.Flat"
                 Shade="Shade.Lighter"
                 Title="@(isError ? "Error" : "Éxito")"
                 Visible="true"
                 AllowClose="false">
        @alertMessage
    </RadzenAlert>
}

@code {
    private List<Oficina> oficinas;
    private int selectedOficinaId;
    private string cedula;
    private string alertMessage; // Para el mensaje de alerta
    private bool isError; // Indica si es un mensaje de error o éxito
    private bool alertVisible; // Controla la visibilidad de la alerta

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Usar contextBd para obtener las oficinas directamente de la base de datos
            oficinas = await contextBd.Oficinas.ToListAsync();

            if (oficinas != null && oficinas.Count > 0)
            {
                Console.WriteLine($"Se han cargado {oficinas.Count} oficinas.");
                foreach (var oficina in oficinas)
                {
                    Console.WriteLine($"Oficina: {oficina.Nombre}, ID: {oficina.Id}");
                }
            }
            else
            {
                Console.WriteLine("No se encontraron oficinas.");
            }

            StateHasChanged(); // Forzamos el renderizado
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar las oficinas: {ex.Message}");
            alertMessage = "Error al cargar las oficinas: " + ex.Message;
            isError = true;
            await MostrarAlertaTemporal();
        }
    }

    private async void RegistrarCliente()
    {
        Console.WriteLine("OficinaIdSeleccionada: " + selectedOficinaId);
        var oficina = oficinas.FirstOrDefault(o => o.Id == selectedOficinaId);

        if (oficina != null)
        {
            try
            {
                var nuevoCliente = new Cliente(cedula);
                ClienteRepository.AgregarCliente(nuevoCliente); // Verificamos si el cliente ya existe
                oficina.AgregarCliente(nuevoCliente);
                OficinaRepository.ActualizarOficina(oficina);

                // Mostrar mensaje de éxito
                alertMessage = $"Cliente registrado exitosamente en la oficina {oficina.Nombre}.";
                isError = false;

                // Limpiar el formulario
                cedula = string.Empty;
                selectedOficinaId = 0;

                // Mostrar la alerta y ocultarla después de 3 segundos
                await MostrarAlertaTemporal();
            }
            catch (Exception ex)
            {
                // Mostrar mensaje de error en caso de excepción
                alertMessage = "Error al registrar el cliente: " + ex.Message;
                isError = true;
                await MostrarAlertaTemporal();
            }
        }
        else
        {
            // Mostrar mensaje de error si no se encuentra la oficina
            alertMessage = "Error al registrar cliente. Oficina no encontrada.";
            isError = true;
            await MostrarAlertaTemporal();
        }
    }


    private async Task MostrarAlertaTemporal()
    {
        alertVisible = true;  // Mostrar la alerta
        StateHasChanged();  // Forzar renderizado
        await Task.Delay(3000);  // Esperar 3 segundos
        alertVisible = false;  // Ocultar la alerta
        StateHasChanged();  // Forzar renderizado
    }
}
