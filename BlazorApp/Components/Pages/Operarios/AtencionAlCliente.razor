@page "/atencionAlCliente"
@rendermode InteractiveServer
@using BlazorApp.Models.DTs
@using BlazorApp.Models.Interfaces
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@inject IOficinaRepository OficinaRepository
@inject IOperarioRepository OperarioRepository
@inject NavigationManager NavigationManager
@inject IHubContext<BlazorApp.Hubs.NotificacionesHub> HubContext
@inject IHubContext<BlazorApp.Hubs.OficinasHub> OficinasHubContext
@inject IJSRuntime JS // Inyecta IJSRuntime

<h1>Atención al Cliente</h1>
<h2>Oficina: @nombreOficina Operario ID: @operarioId</h2>

<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="0.5rem" class="rz-p-2">
    @if (clientesEnEspera == null || clientesEnEspera.Count == 0)
    {
        <p>No hay clientes en espera para la oficina seleccionada.</p>
    }
    else
    {
        <RadzenDataList AllowVirtualization="@allowVirtualization"
                        Style="@(allowVirtualization ? "height:400px;overflow:auto;" : "")"
                        WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)"
                        Data="@clientesEnEspera" TItem="DTCliente" PageSize="5" ShowPagingSummary="true">
            <Template Context="cliente">
                <RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden;">
                    <RadzenRow Gap="0">
                        <RadzenColumn Size="12" SizeLG="4" class="rz-p-4 product-title">
                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-on-secondary-lighter">Cliente Cédula: @(cliente.Cedula)</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeLG="4" class="rz-p-4">
                            <RadzenRow Gap="0">
                                <RadzenColumn Size="12">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Fecha Registro</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@(cliente.FechaRegistro.ToString("yyyy-MM-dd"))</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Estado</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@cliente.Estado.ToString()</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                        <!-- Botón Atender Cliente solo para el primer cliente -->
                        <RadzenColumn Size="12" SizeLG="4" class="rz-p-4">
                            @if (cliente == clientesEnEspera.First()) // Solo se puede atender al primer cliente de la lista
                            {
                                <RadzenButton Text="Atender Cliente"
                                              Click="@(async args => {
                  // Notificar usando HubContext cuando se atiende al cliente
                 // await OficinasHubContext.Clients.All.SendAsync("ReceiveOficinas");
                  await HubContext.Clients.All.SendAsync("LlamandoCliente", cliente.Id, nombreOperario);
                  await HubContext.Clients.All.SendAsync("RefrescarPaginaAtencionCliente");
                  NavigationManager.NavigateTo($"/detalleAtencionCliente/{cliente.Id}/{operarioId}/{oficinaId}");
              })"
                                              Style="width: 100%" />

                            }
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </Template>
        </RadzenDataList>
    }
</RadzenStack>

@code {
    private int oficinaId = 0;
    private int operarioId = 0;
    private string nombreOficina = null;
    private string nombreOperario = null;
    private List<DTCliente> clientesEnEspera = new List<DTCliente>();
    private bool allowVirtualization = false;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("oficinaId", out var oficinaIdValue) &&
            queryParams.TryGetValue("operarioId", out var operarioIdValue))
        {
            if (int.TryParse(oficinaIdValue, out int oficinaId) && int.TryParse(operarioIdValue, out int operarioId))
            {
                this.oficinaId = oficinaId;
                this.operarioId = operarioId;

                var operarioDTO = OperarioRepository.GetOperarioById(operarioId);
                if (operarioDTO != null)
                {
                    nombreOperario = operarioDTO.Nombre;
                }

                await CargarClientesEnEspera();

                // Inicializar la conexión y suscribirse a eventos
                await ConfigurarConexionHub();
            }
        }
    }

    private async Task ConfigurarConexionHub()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notificacionesHub"))
            .WithAutomaticReconnect() // Habilita reconexión automática
            .Build();

        // Configura el evento para refrescar la página de atención al cliente
        hubConnection.On("RefrescarPaginaAtencionCliente", async () =>
        {
            await CargarClientesEnEspera();
            await Task.Delay(100); // Añade un pequeño retraso para asegurar el refresco
            await InvokeAsync(StateHasChanged);
        });

        // Inicia la conexión al hub
        await hubConnection.StartAsync();
        Console.WriteLine("Conexión al hub inicializada");
    }

    private async Task CargarClientesEnEspera()
    {
        if (oficinaId > 0)
        {
            clientesEnEspera = OficinaRepository.ObtenerClientesEnEsperaPorOficinaDTO(oficinaId);
            var oficinaDTO = OficinaRepository.ObtenerOficinaPorIdDTO(oficinaId);
            if (oficinaDTO != null)
            {
                nombreOficina = oficinaDTO.Nombre;
            }
        }
        else
        {
            clientesEnEspera.Clear();
        }

        await InvokeAsync(StateHasChanged);
        await Task.Delay(100); // Añade un retraso para permitir que los cambios se reflejen visualmente
    }
}