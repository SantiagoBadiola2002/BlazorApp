@page "/atencionAlCliente"
@rendermode InteractiveServer
@using BlazorApp.Models.DTs
@using BlazorApp.Models.Interfaces
@inject IOficinaRepository OficinaRepository
@inject NavigationManager NavigationManager

<h1>Atención al Cliente</h1>
<h2>Oficina: @nombreOficina Operario ID: @operarioId</h2>

<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="0.5rem" class="rz-p-2">
    @if (clientesEnEspera == null || clientesEnEspera.Count == 0)
    {
        <p>No hay clientes en espera para la oficina seleccionada.</p>
    }
    else
    {
        <RadzenDataList AllowVirtualization="@allowVirtualization"
                        Style="@(allowVirtualization ? "height:400px;overflow:auto;" : "")"
                        WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)"
                        Data="@clientesEnEspera" TItem="DTCliente" PageSize="5" ShowPagingSummary="true">
            <Template Context="cliente">
                <RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden;">
                    <RadzenRow Gap="0">
                        <RadzenColumn Size="12" SizeLG="4" class="rz-p-4 product-title">
                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-on-secondary-lighter">Cliente Cédula: @(cliente.Cedula)</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeLG="4" class="rz-p-4">
                            <RadzenRow Gap="0">
                                <RadzenColumn Size="12">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Fecha Registro</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@(cliente.FechaRegistro.ToString("yyyy-MM-dd"))</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Estado</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@cliente.Estado.ToString()</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                        <!-- Botón Atender Cliente solo para el primer cliente -->
                        <RadzenColumn Size="12" SizeLG="4" class="rz-p-4">
                            @if (cliente == clientesEnEspera.First()) //Solo se puede atender al primer cliente de la lista
                            {
                                <RadzenButton Text="Atender Cliente" Style="width: 100%" />
                            }
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </Template>
        </RadzenDataList>
    }
</RadzenStack>


@code {
    private int oficinaId = 0; // Inicializa a 0 para representar "no seleccionado"
    private int operarioId = 0; // Variable para almacenar el ID del operario
    private string nombreOficina = null;
    private List<DTCliente> clientesEnEspera = new List<DTCliente>();
    private bool allowVirtualization = false; // Control para virtualización

    protected override async Task OnInitializedAsync()
    {
        // Obtener los parámetros de consulta "oficinaId" y "operarioId"
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("oficinaId", out var oficinaIdValue) &&
            queryParams.TryGetValue("operarioId", out var operarioIdValue))
        {
            if (int.TryParse(oficinaIdValue, out int oficinaId) && int.TryParse(operarioIdValue, out int operarioId))
            {
                this.oficinaId = oficinaId;
                this.operarioId = operarioId;
                await CargarClientesEnEspera();
            }
        }
    }

    private async Task CargarClientesEnEspera()
    {
        if (oficinaId > 0)
        {
            // Obtener los clientes en espera como DTOs
            clientesEnEspera = await OficinaRepository.ObtenerClientesEnEsperaPorOficinaDTOAsync(oficinaId);

            // Obtener el nombre de la oficina usando el DTO
            var oficinaDTO = OficinaRepository.ObtenerOficinaPorIdDTO(oficinaId);
            if (oficinaDTO != null)
            {
                nombreOficina = oficinaDTO.Nombre;
            }
        }
        else
        {
            clientesEnEspera.Clear();
        }
    }
}

<style>
    .product-title {
        min-height: 72px;
        background-color: var(--rz-secondary-lighter);
    }
</style>
