@page "/mesTramite"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorApp.Models.DTs
@using BlazorApp.Models.Interfaces
@inject IOficinaRepository OficinaRepository
@inject NavigationManager Navigation
@using Radzen
@using Radzen.Blazor

<h3>Clientes Atendidos por Mes - Año @Año</h3>

<RadzenDropDown @bind-Value="Año" Data="@añosDisponibles" TextProperty="Texto" ValueProperty="Valor"
                Change="@(async args => await ActualizarGraficoAsync())" />

<RadzenChart Data="@clientesAtencion.OrderBy(c => c.Mes)" Style="height:400px; width:100%;">
    <RadzenBarSeries Data="@clientesAtencion"
                     CategoryProperty="NombreMes"
                     ValueProperty="Duracion"
                     Title="Clientes Atendidos" />
</RadzenChart>

@code {
    private List<DTAtencionCliente> clientesAtencion = new List<DTAtencionCliente>();
    public int Año { get; set; } = DateTime.Now.Year;
    private List<AñoItem> añosDisponibles = new List<AñoItem>();
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await LoadAñosDisponiblesAsync();
        await LoadOficinasAsync();
        await InitializeSignalRConnection(); // Inicializa la conexión SignalR
    }

    private async Task LoadAñosDisponiblesAsync()
    {
        var años = OficinaRepository.ObtenerAñosDisponibles();
        añosDisponibles = años.Select(a => new AñoItem { Valor = a }).ToList();
    }

    private async Task LoadOficinasAsync()
    {
        clientesAtencion = OficinaRepository.ObtenerClientesPorMes(Año) ?? new List<DTAtencionCliente>();
    }

    private async Task ActualizarGraficoAsync()
    {
        await LoadOficinasAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task InitializeSignalRConnection()
    {
        // Establece la conexión con SignalR
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/atencionHub")) // URL del Hub en el servidor
            .Build();

        // Escucha el mensaje "ReceiveOficinas" del Hub
        hubConnection.On("ReceiveOficinas", async () =>
        {
            await ActualizarGraficoAsync();
            await InvokeAsync(StateHasChanged);
        });

        // Inicia la conexión
        await hubConnection.StartAsync();
    }

    // Limpia la conexión cuando el componente se elimina
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public class AñoItem
    {
        public int Valor { get; set; }
        public string Texto => Valor.ToString();
    }
}
