@page "/flujoCliente"
@rendermode InteractiveServer
@using BlazorApp.Models.DTs
@using BlazorApp.Models.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@inject IOficinaRepository OficinaRepository
@inject NavigationManager NavigationManager

<h3>Flujo de Clientes en Espera</h3>

@if (oficinas == null)
{
    <p>Cargando oficinas...</p>
}
else
{
    <RadzenDataGrid Data="@oficinas" TItem="DTOficina" @key="oficinas?.Count">
        <Columns>
            <!-- Columna para el nombre de la oficina -->
            <RadzenDataGridColumn TItem="DTOficina" Property="Nombre" Title="Oficina" />

            <!-- Columna con el gráfico de clientes y el nombre de la oficina dentro del gráfico -->
            <RadzenDataGridColumn TItem="DTOficina">
                <Template Context="data">
                    @{
                        var clienteCount = data.ClientesIds.Count();
                        var rectColor = clienteCount < 5 ? "#6BCB77" : clienteCount < 10 ? "#FFD166" : "#EF476F";
                        var maxRectWidth = 200;
                        var rectWidth = Math.Min(clienteCount * 20, maxRectWidth);
                    }
                    <svg width="100%" height="50">
                        <!-- Nombre de la oficina dentro del gráfico -->
                        <!-- Rectángulo de fondo -->
                        <rect x="5" y="25" width="@maxRectWidth" height="20" fill="#F0F0F0" rx="5" ry="5" />
                        <!-- Rectángulo representando la cantidad de clientes -->
                        <rect x="5" y="25" width="@rectWidth" height="20" fill="@rectColor" rx="5" ry="5">
                            <title>Cantidad de clientes: @clienteCount</title>
                        </rect>
                        <!-- Texto con el número de clientes junto al gráfico -->
                        <text x="@(rectWidth + 15)" y="40" fill="black" font-weight="bold">@clienteCount clientes</text>
                    </svg>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

}

@code {
    private List<DTOficina> oficinas = new List<DTOficina>();
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await LoadOficinasAsync();  // Carga inicial
        await SetupSignalRAsync();  // Configura SignalR para actualizaciones en tiempo real
    }

    private async Task LoadOficinasAsync()
    {
        try
        {
            oficinas = OficinaRepository.ListarClientesOficinasDTO();
            await InvokeAsync(StateHasChanged); // Actualiza la UI
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching oficinas: {ex.Message}");
            oficinas = new List<DTOficina>();
            await InvokeAsync(StateHasChanged); // Asegura que la UI refleje el estado
        }
    }

    private async Task SetupSignalRAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/oficinasHub"))
            .Build();

        // Configura SignalR para recargar las oficinas cuando haya cambios
        hubConnection.On("ReceiveOficinas", async () =>
        {
            await LoadOficinasAsync();  // Recarga la lista de oficinas
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();  // Asegura que se cierre la conexión de SignalR
        }
    }
}
