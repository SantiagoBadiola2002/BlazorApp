@page "/tiempoTramite"
@using BlazorApp.Models.DTs
@using BlazorApp.Models.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@inject IOficinaRepository OficinaRepository
@inject NavigationManager NavigationManager



<h3>Consulta de Atención de Clientes</h3>

<!-- Sección para filtrar por fecha -->
<div>
    <h4>Filtrar por fecha</h4>
    <div>
        <label>Día: </label>
        <input type="number" @bind="Dia" min="1" max="31" />
    </div>
    <div>
        <label>Mes: </label>
        <input type="number" @bind="Mes" min="1" max="12" />
    </div>
    <div>
        <label>Año: </label>
        <input type="number" @bind="Año" min="2000" />
    </div>
</div>

<button @onclick="LoadOficinasAsync">Consultar Atención</button>

@if (clientesAtencion == null)
{
    <p>Cargando oficinas...</p>
}
else
{
    <h4>Resultados de la consulta</h4>
    <RadzenDataGrid Data="@clientesAtencion" TItem="DTAtencionCliente" Striped="true" ShowFilterRow="true">
        <Columns>
            <RadzenDataGridColumn Property="RegistroDeAtencionId" Title="RegistroDeAtencionId" />
            <RadzenDataGridColumn Property="OperarioId" Title="Operario" />
            <RadzenDataGridColumn Property="ClienteId" Title="Cliente" />
            <RadzenDataGridColumn Property="OficinaId" Title="Oficina" />
            <RadzenDataGridColumn Property="Fecha" Title="Fecha" />
            <RadzenDataGridColumn Property="Duracion" Title="Duración" />
        </Columns>
    </RadzenDataGrid>
}

@code {
    private List<DTAtencionCliente> clientesAtencion;
    private HubConnection hubConnection;

    public int Dia { get; set; } = DateTime.Now.Day; // Valor predeterminado
    public int Mes { get; set; } = DateTime.Now.Month; // Valor predeterminado
    public int Año { get; set; } = DateTime.Now.Year; // Valor predeterminado

    protected override async Task OnInitializedAsync()
    {
        await LoadOficinasAsync();  // Carga inicial
        await InitializeSignalR();
    }

    private async Task InitializeSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/atencionHub"))
            .Build();

        hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            // Lógica para manejar la notificación
            Console.WriteLine(message);
            // Puedes hacer una nueva consulta a la base de datos aquí
        });

        await hubConnection.StartAsync();
    }

    private async Task LoadOficinasAsync()
    {
        // Lógica para cargar datos, incluyendo llamada a SignalR si es necesario
        clientesAtencion =  OficinaRepository.ObtenerTodosLosRegistros(Dia, Mes, Año) ?? new List<DTAtencionCliente>();
        await InvokeAsync(StateHasChanged); // Actualiza la UI
    }
}