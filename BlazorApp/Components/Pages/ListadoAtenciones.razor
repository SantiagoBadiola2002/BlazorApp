@page "/listadoAtenciones"
@rendermode InteractiveServer
@using BlazorApp.Models.DTs
@using BlazorApp.Models.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@inject IOficinaRepository OficinaRepository
@inject NavigationManager NavigationManager

<h1 style="text-align:center">Consulta de Atención de Clientes</h1>

<!-- Sección para filtrar por fecha -->
@* Sección para filtrar por fecha *@
<RadzenCard Variant="Variant.Outlined">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
            <RadzenLabel Text="Día:" />
            <RadzenNumeric @bind-Value="Dia" Min="1" Max="31" Style="width: 60px;" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
            <RadzenLabel Text="Mes:" />
            <RadzenNumeric @bind-Value="Mes" Min="1" Max="12" Style="width: 60px;" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
            <RadzenLabel Text="Año:" />
            <RadzenNumeric @bind-Value="Año" Min="2000" Style="width: 80px;" />
        </RadzenStack>
        <RadzenButton Text="Consultar Atención" Click="LoadOficinasAsync" />
    </RadzenStack>
</RadzenCard>

@if (clientesAtencion == null)
{
    <p>Cargando oficinas...</p>
}
else if (clientesAtencion.Count == 0)
{
    <h4>No se encontraron registros para la fecha seleccionada.</h4>
}
else
{
    <h4>Resultados de la consulta</h4>
    <RadzenDataGrid Data="@clientesAtencion" TItem="DTAtencionCliente" Striped="true" ShowFilterRow="true" class="radzen-grid">
        <Columns>
            <RadzenDataGridColumn Property="RegistroDeAtencionId" Title="Registro De Atención Id" />
            <RadzenDataGridColumn Property="NombreOperario" Title="Operario" />
            <RadzenDataGridColumn Property="NombreOficina" Title="Oficina" />
            <RadzenDataGridColumn Property="Fecha" Title="Fecha" />
            <RadzenDataGridColumn Property="Duracion" Title="Duración (min)" />
        </Columns>
    </RadzenDataGrid>

}

@code {
    private List<DTAtencionCliente> clientesAtencion;
    private HubConnection hubConnection;

    public int Dia { get; set; } = DateTime.Now.Day; // Valor predeterminado
    public int Mes { get; set; } = DateTime.Now.Month; // Valor predeterminado
    public int Año { get; set; } = DateTime.Now.Year; // Valor predeterminado

    protected override async Task OnInitializedAsync()
    {
        await LoadOficinasAsync();  // Carga inicial
        await InitializeSignalR();
    }

    private async Task InitializeSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/atencionHub"))
            .Build();

        hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            // Lógica para manejar la notificación
            Console.WriteLine(message);
            // Puedes hacer una nueva consulta a la base de datos aquí
        });

        await hubConnection.StartAsync();
    }

    private async Task LoadOficinasAsync()
    {
        // Lógica para cargar datos, incluyendo llamada a SignalR si es necesario
        clientesAtencion = OficinaRepository.ObtenerTodosLosRegistros(Dia, Mes, Año) ?? new List<DTAtencionCliente>();
        await InvokeAsync(StateHasChanged); // Actualiza la UI
    }
}
