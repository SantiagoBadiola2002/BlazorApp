@page "/SelectOficinaAtencionCliente"
@rendermode InteractiveServer
@using BlazorApp.Models.DTs
@using BlazorApp.Models.Interfaces
@inject IOficinaRepository OficinaRepository
@inject IOperarioRepository OperarioRepository
@inject NavigationManager NavigationManager

<h1>Selecciona oficina y nombre operario</h1>
<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
    <!-- DropDown para seleccionar la oficina -->
    <RadzenDropDown @bind-Value="selectedOficinaId"
                    Data="oficinas"
                    TextProperty="Nombre"
                    ValueProperty="Id"
                    Style="width: 100%; max-width: 300px;"
                    Name="DropDownBindValue"
                    Placeholder="Seleccione una oficina"
                    Change="@(async (args) => await OficinaSeleccionada(args))" />
    <RadzenColumn Size="12" SizeMD="6" SizeLG="12">
        <!-- Campo para el nombre del operario -->
        <RadzenFormField Text="Nombre del Operario" Style="width: 100%; max-width: 300px;">
            <RadzenTextBox @bind-Value="operarioNombre" Placeholder="Ingrese su nombre" />
        </RadzenFormField>

        <!-- Campo para la contraseña del operario -->
        <RadzenFormField Text="Contraseña del Operario" Style="width: 100%; max-width: 300px;">
            <RadzenTextBox @bind-Value="operarioContraseña" Placeholder="Ingrese su contraseña" Type="password" />
        </RadzenFormField>
    </RadzenColumn>

    <RadzenButton Text="Ingresar!" class="rz-ripple" Disabled="@isButtonDisabled" Click="Redirigir" />
</RadzenStack>

<!-- Alerta de error -->
@if (alertVisible)
{
    <RadzenAlert AlertStyle="@(isError ? AlertStyle.Danger : AlertStyle.Success)"
                 Variant="Variant.Flat"
                 Shade="Shade.Lighter"
                 Title="@(isError ? "Error" : "Éxito")"
                 Visible="true"
                 AllowClose="false">
        @alertMessage
    </RadzenAlert>
}

@code {
    private List<DTOficina> oficinas;
    private List<DTOperario> operarios;
    private int selectedOficinaId;
    private string operarioNombre;
    private string operarioContraseña;  // Nueva variable para la contraseña
    private int operarioId;

    // Condición para habilitar el botón: nombre, contraseña y oficina deben estar seleccionados
    private bool isButtonDisabled => string.IsNullOrEmpty(operarioNombre) || string.IsNullOrEmpty(operarioContraseña) || selectedOficinaId == 0;

    // Variables para manejar la alerta
    private bool alertVisible = false;
    private bool isError = false;
    private string alertMessage = "";

    // Cargar las oficinas como DTOs desde el repositorio
    protected override async Task OnInitializedAsync()
    {
        oficinas = await OficinaRepository.ObtenerTodasLasOficinasDTOAsync();
    }

    // Método que se llama al seleccionar una oficina
    private async Task OficinaSeleccionada(object args)
    {
        selectedOficinaId = (int)args;

        // Obtener los detalles completos de los operarios de la oficina seleccionada
        operarios = await OperarioRepository.ObtenerOperariosPorOficinaIdAsync(selectedOficinaId);

        // Resetear la alerta al cambiar de oficina
        alertVisible = false;
    }

    // Redirigir a la página de atención al cliente con los parámetros
    private async void Redirigir()
    {
        // Buscar el operario basado en el nombre ingresado y verificar la contraseña
        var operario = operarios?.FirstOrDefault(o => !string.IsNullOrEmpty(o.Nombre)
                                                   && o.Nombre.Equals(operarioNombre, StringComparison.OrdinalIgnoreCase)
                                                   && o.Contraseña == operarioContraseña);
        if (operario != null)
        {
            operarioId = operario.Id;
            Console.WriteLine("Redirigiendo a atencion cliente oficina ID: " + selectedOficinaId + ", Operario ID: " + operarioId);
            NavigationManager.NavigateTo($"/AtencionAlCliente?oficinaId={selectedOficinaId}&operarioId={operarioId}");
        }
        else
        {
            // Mostrar mensaje de error: Operario no encontrado o contraseña incorrecta
            alertVisible = true;
            isError = true;
            alertMessage = "Operario no encontrado o contraseña incorrecta.";
            Console.WriteLine("Operario no encontrado o contraseña incorrecta");

            // Esperar 4 segundos y luego ocultar el mensaje de error
            await Task.Delay(4000);
            alertVisible = false;
            StateHasChanged();
        }
    }
}
