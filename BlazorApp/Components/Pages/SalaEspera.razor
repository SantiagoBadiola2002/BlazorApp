@page "/salaEspera"
@rendermode InteractiveServer
@using BlazorApp.Models.DTs
@using BlazorApp.Models.Interfaces
@using Microsoft.AspNetCore.SignalR;
@using Microsoft.AspNetCore.SignalR.Client

@inject IOficinaRepository OficinaRepository
@inject IClienteRepository ClienteRepository
@inject NavigationManager NavigationManager
@inject IHubContext<BlazorApp.Hubs.NotificacionesHub> HubContext; // Inyectar el HubContext para enviar mensajes si es necesario
@inject NotificationService NotificationService

<h1>Sala De Espera</h1>
<h2>Oficina @nombreOficina</h2>

<!-- RadzenRow para mostrar las listas lado a lado -->
<RadzenRow Gap="1rem">

    <!-- Columna de Clientes en Espera -->
    <RadzenColumn Size="6">
        <h3>Clientes en Espera</h3>
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="0.5rem" class="rz-p-2">
            @if (clientesEnEspera == null || clientesEnEspera.Count == 0)
            {
                <p>No hay clientes en espera para la oficina seleccionada.</p>
            }
            else
            {
                <!-- Lista de clientes en espera -->
                <RadzenDataList AllowVirtualization="@allowVirtualization"
                                Style="@(allowVirtualization ? "height:400px;overflow:auto;" : "")"
                                WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)"
                                Data="@clientesEnEspera" TItem="DTCliente" PageSize="5" ShowPagingSummary="true">
                    <Template Context="cliente">
                        <RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden; background-color: #45dddd;">
                            <RadzenRow Gap="0">
                                <RadzenColumn Size="12" SizeLG="4" class="rz-p-4 product-title">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-on-secondary-lighter">Cliente Cédula: @(cliente.Cedula)</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeLG="4" class="rz-p-4">
                                    <RadzenRow Gap="0">
                                        <RadzenColumn Size="12">
                                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Fecha Registro</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Body2">@(cliente.FechaRegistro.ToString("yyyy-MM-dd"))</RadzenText>
                                        </RadzenColumn>
                                        <RadzenColumn Size="12">
                                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Estado</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Body2">@cliente.Estado.ToString()</RadzenText>
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
            }
        </RadzenStack>
    </RadzenColumn>

    <!-- Columna de Clientes Procesando -->
    <RadzenColumn Size="6">
        <h3>Llamados</h3>
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="0.5rem" class="rz-p-2">
            @if (clientesProcesando == null || clientesProcesando.Count == 0)
            {
                <p>No hay clientes siendo procesados en este momento.</p>
            }
            else
            {
                <!-- Lista de clientes procesando -->
                <RadzenDataList AllowVirtualization="@allowVirtualization"
                                Style="@(allowVirtualization ? "height:400px;overflow:auto;" : "")"
                                WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)"
                                Data="@clientesProcesando" TItem="DTCliente" PageSize="5" ShowPagingSummary="true">
                    <Template Context="cliente">
                        <RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden; background-color: #FFCC00;">
                            <RadzenRow Gap="0">
                                <RadzenColumn Size="12" SizeLG="4" class="rz-p-4 product-title">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-on-secondary-lighter">Cliente Cédula: @(cliente.Cedula)</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeLG="4" class="rz-p-4">
                                    <RadzenRow Gap="0">
                                        <RadzenColumn Size="12">
                                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Fecha Registro</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Body2">@(cliente.FechaRegistro.ToString("yyyy-MM-dd"))</RadzenText>
                                        </RadzenColumn>
                                        <RadzenColumn Size="12">
                                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Estado</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Body2">@cliente.Estado.ToString()</RadzenText>
                                        </RadzenColumn>
                                        <RadzenColumn Size="12">
                                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Operario</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Body2">@cliente.Operario</RadzenText>
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
            }
        </RadzenStack>
    </RadzenColumn>

</RadzenRow>

<!-- Alerta Radzen para notificar al cliente -->
<RadzenStack Gap="0" class="rz-py-8 rz-px-12">
    @if (mostrarMensaje)
    {
        <RadzenAlert AllowClose="true" AlertStyle="AlertStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter" Close="@OnClose">
            @mensajeNotificacion
        </RadzenAlert>
    }
</RadzenStack>

@code {
    private int oficinaId = 0; // Inicializa a 0 para representar "no seleccionado"
    private string nombreOficina = null;
    private List<DTCliente> clientesEnEspera = new List<DTCliente>();
    private List<DTCliente> clientesProcesando = new List<DTCliente>();
    private bool allowVirtualization = false; // Control para virtualización

    // Para la notificación temporal
    private string mensajeNotificacion;
    private bool mostrarMensaje = false;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("oficinaId", out var oficinaIdValue) && int.TryParse(oficinaIdValue, out oficinaId))
        {
            await CargarClientesEnEspera();
            await CargarClientesProcesando();
        }

        var hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notificacionesHub"))
            .Build();

        hubConnection.On<int, string>("LlamandoCliente", async (clienteId, operario) =>
        {
            var clienteLlamado = clientesEnEspera.FirstOrDefault(c => c.Id == clienteId);
            if (clienteLlamado != null)
            {
                // Remover de la lista de espera y asignar operario
                clientesEnEspera.Remove(clienteLlamado);
                clienteLlamado.Operario = operario;
                clienteLlamado.Estado = Models.EstadoCliente.Procesando;

                // Añadir a la lista de clientes procesando
                clientesProcesando.Add(clienteLlamado);

                await ClienteRepository.ActualizarEstadoClientePorIdAsync(clienteId, Models.EstadoCliente.Procesando);

                // Notificación del operario llamando
                mensajeNotificacion = $"El operario {operario} está llamando al cliente con cédula {clienteLlamado.Cedula}.";
                mostrarMensaje = true;
                await InvokeAsync(StateHasChanged);

                // Ocultar el mensaje después de 5 segundos
                await Task.Delay(5000);
                mostrarMensaje = false;
                await InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
    }

    private async Task CargarClientesEnEspera()
    {
        if (oficinaId > 0)
        {
            clientesEnEspera = await OficinaRepository.ObtenerClientesEnEsperaPorOficinaDTOAsync(oficinaId);

            var oficinaDTO = OficinaRepository.ObtenerOficinaPorIdDTO(oficinaId);
            nombreOficina = oficinaDTO?.Nombre;
        }
        else
        {
            clientesEnEspera.Clear();
        }
    }

    private async Task CargarClientesProcesando()
    {
        if (oficinaId > 0)
        {
            clientesProcesando = await OficinaRepository.ObtenerClientesProcesandoPorOficinaDTOAsync(oficinaId);

            var oficinaDTO = OficinaRepository.ObtenerOficinaPorIdDTO(oficinaId);
            nombreOficina = oficinaDTO?.Nombre;
        }
        else
        {
            clientesProcesando.Clear();
        }
    }

    void OnClose()
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Notificación cerrada", Detail = "El mensaje ha sido cerrado" });
        mostrarMensaje = false; // Asegurarse de que el mensaje se oculte cuando se cierra la alerta
    }
}
