@page "/salaEspera"
@rendermode InteractiveServer
@using BlazorApp.Models.DTs
@using BlazorApp.Models.Interfaces
@using Microsoft.AspNetCore.SignalR;
@using Microsoft.AspNetCore.SignalR.Client

@inject IOficinaRepository OficinaRepository
@inject IClienteRepository ClienteRepository
@inject NavigationManager NavigationManager
@inject IHubContext<BlazorApp.Hubs.NotificacionesHub> HubContext; // Inyectar el HubContext para enviar mensajes si es necesario

<h1>Sala De Espera</h1>
<h2>Oficina @nombreOficina</h2>

@if (mostrarMensaje)
{
    <div class="notification">@mensajeNotificacion</div>
}

<!-- RadzenStack para agrupar los elementos verticalmente -->
<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="0.5rem" class="rz-p-2">
    <!-- Mostrar mensaje si no se encuentran clientes en espera -->
    @if (clientesEnEspera == null || clientesEnEspera.Count == 0)
    {
        <p>No hay clientes en espera para la oficina seleccionada.</p>
    }
    else
    {
        <!-- Lista de clientes -->
        <RadzenDataList AllowVirtualization="@allowVirtualization"
                        Style="@(allowVirtualization ? "height:400px;overflow:auto;" : "")"
                        WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)"
                        Data="@clientesEnEspera" TItem="DTCliente" PageSize="5" ShowPagingSummary="true">
            <Template Context="cliente">
                <RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden;">
                    <RadzenRow Gap="0">
                        <RadzenColumn Size="12" SizeLG="4" class="rz-p-4 product-title">
                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-on-secondary-lighter">Cliente Cédula: @(cliente.Cedula)</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeLG="4" class="rz-p-4">
                            <RadzenRow Gap="0">
                                <RadzenColumn Size="12">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Fecha Registro</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@(cliente.FechaRegistro.ToString("yyyy-MM-dd"))</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Estado</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@cliente.Estado.ToString()</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </Template>
        </RadzenDataList>
    }
</RadzenStack>

@code {
    private int oficinaId = 0; // Inicializa a 0 para representar "no seleccionado"
    private string nombreOficina = null;
    private List<DTCliente> clientesEnEspera = new List<DTCliente>();
    private bool allowVirtualization = false; // Control para virtualización

    // Para la notificación temporal
    private string mensajeNotificacion;
    private bool mostrarMensaje = false;

    protected override async Task OnInitializedAsync()
    {
        // Obtener el parámetro de consulta "oficinaId"
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("oficinaId", out var oficinaIdValue) && int.TryParse(oficinaIdValue, out oficinaId))
        {
            await CargarClientesEnEspera();
        }

        // Aquí aún necesitas configurar una conexión cliente para escuchar notificaciones en la sala de espera
        var hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notificacionesHub"))
            .Build();

        hubConnection.On<int>("LlamandoCliente", async (clienteId) =>
        {
            // Busca el cliente en la lista para identificarlo
            var clienteLlamado = clientesEnEspera.FirstOrDefault(c => c.Id == clienteId);
            if (clienteLlamado != null)
            {
                ClienteRepository.ActualizarEstadoClientePorIdAsync(clienteId, Models.EstadoCliente.Procesando);
                mensajeNotificacion = $"El operario está llamando al cliente con cédula {clienteLlamado.Cedula}.";
                mostrarMensaje = true;
                await InvokeAsync(StateHasChanged);

                // Ocultar el mensaje después de 5 segundos
                await Task.Delay(5000);
                mostrarMensaje = false;
                await InvokeAsync(StateHasChanged);

                await Task.Delay(5000);

                // Refrescar la página después de 10 segundos
                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            }
            
        });

        await hubConnection.StartAsync();
    }

    private async Task CargarClientesEnEspera()
    {
        if (oficinaId > 0)
        {
            // Obtener los clientes en espera como DTOs
            clientesEnEspera = await OficinaRepository.ObtenerClientesEnEsperaPorOficinaDTOAsync(oficinaId);

            // Obtener nombre de la oficina usando el método DTO
            var oficinaDTO = OficinaRepository.ObtenerOficinaPorIdDTO(oficinaId);
            nombreOficina = oficinaDTO?.Nombre;
        }
        else
        {
            clientesEnEspera.Clear();
        }
    }

    public async Task NotificarDesdeSala(int clienteId)
    {
        // Si necesitas notificar desde la sala de espera, puedes hacerlo usando el HubContext
        await HubContext.Clients.All.SendAsync("LlamandoCliente", clienteId);
    }
}
